<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>細菌接種練習</title>
    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <div id="root"></div>
    <script type="text/babel">
        // import React, { useState, useRef, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AlertCircle, RotateCcw, CheckCircle } from 'lucide-react';

const StreakPlatingGame = () => {
  const [isDrawing, setIsDrawing] = useState(false);
  const [currentStroke, setCurrentStroke] = useState([]);
  const [strokes, setStrokes] = useState([]);
  const [currentZone, setCurrentZone] = useState(1);
  const [score, setScore] = useState(null);
  const [feedback, setFeedback] = useState('');
  const [encouragement, setEncouragement] = useState('');
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [canvasSize, setCanvasSize] = useState({ width: 400, height: 400 });
  
  const canvasRef = useRef(null);
  const containerRef = useRef(null);
  const animationFrameRef = useRef(null);

  useEffect(() => {
    const updateCanvasSize = () => {
      if (containerRef.current) {
        const containerWidth = containerRef.current.offsetWidth;
        const size = Math.min(containerWidth, window.innerHeight - 200);
        setCanvasSize({
          width: size,
          height: size
        });
      }
    };

    updateCanvasSize();
    window.addEventListener('resize', updateCanvasSize);
    return () => window.removeEventListener('resize', updateCanvasSize);
  }, []);

  const getStrokeAngle = (stroke) => {
    if (!stroke || stroke.length < 2) return 0;
    
    const start = stroke[0];
    const end = stroke[stroke.length - 1];
    const dx = end.x - start.x;
    const dy = end.y - start.y;
    let angle = Math.atan2(dy, dx) * 180 / Math.PI;
    
    if (angle < -180) angle += 360;
    if (angle > 180) angle -= 360;
    
    return angle;
  };

  const checkStrokeOverlap = (currentStroke, previousStroke) => {
    if (!currentStroke || !previousStroke || 
        currentStroke.length < 2 || previousStroke.length < 2) return false;
    
    const prevEnd = previousStroke.slice(-Math.min(5, previousStroke.length));
    const currentStart = currentStroke.slice(0, Math.min(5, currentStroke.length));
    
    for (const current of currentStart) {
      for (const prev of prevEnd) {
        const distance = Math.sqrt(
          Math.pow(current.x - prev.x, 2) + 
          Math.pow(current.y - prev.y, 2)
        );
        if (distance < 30) return true;
      }
    }
    
    return false;
  };

  const getStrokeArea = (stroke) => {
    if (!stroke || stroke.length < 3) return 0;
    
    const minX = Math.min(...stroke.map(p => p.x));
    const maxX = Math.max(...stroke.map(p => p.x));
    const minY = Math.min(...stroke.map(p => p.y));
    const maxY = Math.max(...stroke.map(p => p.y));
    
    return (maxX - minX) * (maxY - minY) / (canvasSize.width * canvasSize.height);
  };

  const evaluateStrokes = () => {
    let totalScore = 100;
    let feedbackText = [];

    if (strokes.length < 4) {
      totalScore -= 20;
      feedbackText.push('請完成所有四個區域的劃線');
      setScore(Math.max(0, totalScore));
      setEncouragement('加油，請繼續練習！');
      setFeedback(feedbackText.join('、'));
      return;
    }

    // 第一區評估
    const firstAngle = getStrokeAngle(strokes[0]);
    const firstArea = getStrokeArea(strokes[0]);
    
    if (Math.abs(firstAngle - 45) > 30) {
      totalScore -= 15;
      feedbackText.push('第一區需從左上往右下劃線');
    }
    if (firstArea > 0.15) {
      totalScore -= 10;
      feedbackText.push('第一區範圍過大，需要更集中');
    }

    // 第二區評估
    const secondAngle = getStrokeAngle(strokes[1]);
    if (Math.abs(secondAngle) > 25) {
      totalScore -= 10;
      feedbackText.push('第二區需要保持水平劃線');
    }
    if (!checkStrokeOverlap(strokes[1], strokes[0])) {
      totalScore -= 10;
      feedbackText.push('第二區需與第一區末端重疊2-3條線');
    }

    // 第三區評估
    const thirdAngle = getStrokeAngle(strokes[2]);
    if (Math.abs(thirdAngle + 45) > 30) {
      totalScore -= 10;
      feedbackText.push('第三區需從右上往左下劃線');
    }
    if (!checkStrokeOverlap(strokes[2], strokes[1])) {
      totalScore -= 10;
      feedbackText.push('第三區需與第二區末端重疊2-3條線');
    }

    // 第四區評估
    const fourthAngle = getStrokeAngle(strokes[3]);
    if (Math.abs(fourthAngle + 45) > 30) {
      totalScore -= 10;
      feedbackText.push('第四區需從右上往左下完成最終稀釋');
    }
    if (!checkStrokeOverlap(strokes[3], strokes[2])) {
      totalScore -= 10;
      feedbackText.push('第四區需與第三區末端重疊2-3條線');
    }

    const finalScore = Math.max(0, totalScore);
    
    let encouragementText = '';
    if (finalScore > 90) {
      encouragementText = '太強了，這根本專業等級！';
    } else if (finalScore >= 80) {
      encouragementText = '哇賽，接近完美了！';
    } else if (finalScore >= 60) {
      encouragementText = '不錯喔，但可以再更好！';
    } else {
      encouragementText = '加油，請繼續練習！';
    }

    setScore(finalScore);
    setEncouragement(encouragementText);
    setFeedback(feedbackText.length > 0 ? feedbackText.join('、') : '完美！你的接種技巧已經相當專業了！');
  };

  const drawLoop = (ctx, x, y) => {
    ctx.save();
    const scale = canvasSize.width / 400;
    
    ctx.strokeStyle = '#666';
    ctx.lineWidth = 2 * scale;
    ctx.beginPath();
    ctx.arc(x, y, 5 * scale, 0, 2 * Math.PI);
    ctx.stroke();
    
    ctx.beginPath();
    ctx.moveTo(x, y + 5 * scale);
    ctx.lineTo(x, y + 45 * scale);
    ctx.stroke();
    
    ctx.lineWidth = 3 * scale;
    ctx.beginPath();
    ctx.moveTo(x, y + 45 * scale);
    ctx.lineTo(x, y + 55 * scale);
    ctx.stroke();
    ctx.restore();
  };

  const draw = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    const scale = canvasSize.width / 400;
    const centerX = canvasSize.width / 2;
    const centerY = canvasSize.height / 2;
    const radius = 180 * scale;
    
    // Draw petri dish
    ctx.fillStyle = '#FFE4C4';
    ctx.beginPath();
    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
    ctx.fill();
    ctx.strokeStyle = '#999';
    ctx.lineWidth = 1 * scale;
    ctx.stroke();
    
    // Draw completed strokes
    strokes.forEach((stroke, index) => {
      ctx.beginPath();
      ctx.strokeStyle = ['#FF0000', '#00FF00', '#FFA500', '#0000FF'][index];
      ctx.lineWidth = 3 * scale;
      ctx.moveTo(stroke[0].x, stroke[0].y);
      for (let i = 1; i < stroke.length; i++) {
        ctx.lineTo(stroke[i].x, stroke[i].y);
      }
      ctx.stroke();
    });
    
    // Draw current stroke
    if (isDrawing && currentStroke.length > 0) {
      ctx.beginPath();
      ctx.strokeStyle = ['#FF0000', '#00FF00', '#FFA500', '#0000FF'][currentZone - 1];
      ctx.lineWidth = 3 * scale;
      ctx.moveTo(currentStroke[0].x, currentStroke[0].y);
      for (let i = 1; i < currentStroke.length; i++) {
        ctx.lineTo(currentStroke[i].x, currentStroke[i].y);
      }
      ctx.lineTo(mousePosition.x, mousePosition.y);
      ctx.stroke();
    }
    
    drawLoop(ctx, mousePosition.x, mousePosition.y);
    
    animationFrameRef.current = requestAnimationFrame(draw);
  };

  useEffect(() => {
    animationFrameRef.current = requestAnimationFrame(draw);
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [strokes, currentStroke, mousePosition, isDrawing, canvasSize]);

  const getCanvasCoordinates = (event) => {
    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    
    if (event.touches) {
      return {
        x: (event.touches[0].clientX - rect.left) * scaleX,
        y: (event.touches[0].clientY - rect.top) * scaleY
      };
    } else {
      return {
        x: (event.clientX - rect.left) * scaleX,
        y: (event.clientY - rect.top) * scaleY
      };
    }
  };

  const startDrawing = (e) => {
    e.preventDefault();
    if (currentZone > 4 || score !== null) return;
    
    const coords = getCanvasCoordinates(e);
    setIsDrawing(true);
    setCurrentStroke([coords]);
    setMousePosition(coords);
  };

  const handleMove = (e) => {
    e.preventDefault();
    const coords = getCanvasCoordinates(e);
    setMousePosition(coords);
    
    if (isDrawing) {
      setCurrentStroke(prev => [...prev, coords]);
    }
  };

  const endDrawing = (e) => {
    if (e) e.preventDefault();
    if (isDrawing) {
      setStrokes(prev => [...prev, currentStroke]);
      setCurrentZone(prev => prev + 1);
      setIsDrawing(false);
      
      if (currentZone === 4) {
        evaluateStrokes();
      }
    }
  };

  const resetGame = () => {
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
    }
    
    setStrokes([]);
    setCurrentStroke([]);
    setCurrentZone(1);
    setScore(null);
    setFeedback('');
    setEncouragement('');
    setMousePosition({ x: 50, y: 50 });
    setIsDrawing(false);
    
    animationFrameRef.current = requestAnimationFrame(draw);
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>細菌接種練習 - 第 {currentZone} 區</span>
          <Button 
            variant="outline" 
            size="sm"
            onClick={resetGame}
            className="flex items-center gap-2"
          >
            <RotateCcw className="w-4 h-4" />
            重新開始
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="relative" ref={containerRef}>
          <canvas
            ref={canvasRef}
            width={canvasSize.width}
            height={canvasSize.height}
            className="border rounded-lg cursor-crosshair touch-none"
            onMouseDown={startDrawing}
            onMouseMove={handleMove}
            onMouseUp={endDrawing}
            onMouseLeave={endDrawing}
            onTouchStart={startDrawing}
            onTouchMove={handleMove}
            onTouchEnd={endDrawing}
          />
          
          {score !== null && (
            <div className="mt-4 p-4 rounded-lg bg-gray-100">
              <div className="flex items-center gap-2 mb-2">
                {score >= 80 ? (
                  <CheckCircle className="w-5 h-5 text-green-500" />
                ) : (
                  <AlertCircle className="w-5 h-5 text-yellow-500" />
                )}
                <span className="font-semibold">
                  得分：{score} - {encouragement}
                </span>
              </div>
              {feedback && (
                <p className="text-sm text-gray-600 mt-2">
                  評語：{feedback}
                </p>
              )}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default StreakPlatingGame;
    </script>
</body>
</html>
